import { GetServerSideProps, type NextPage } from "next";
import Head from "next/head";


import { api } from "@/utils/api";
import { useEffect } from "react";
import { KeyValue } from "@/utils/logic/@types";
import { ApproverDetail, getFieldModel } from "@/utils/logic/example";
import apiService from "@/utils/logic/service/api";
import config from "@/utils/logic/service/config";
import { Configuraion } from "@/utils/logic/service/@types/config";
import { DocumentData } from "firebase/firestore";
import redis from "@/utils/common/redis";

type Props = {
  // data: Configuraion[]
  data: DocumentData[]
  cache: any;
}

const Home: NextPage<Props> = ({ data, cache }) => {

  const hello = api.example.hello.useQuery({ text: "from tRPC" });

  useEffect(() => {
    // f.findAll("connection").then((r) => { console.log(r) })
  }, [])

  useEffect(() => {
    // const game_indices = getValueFromNestedObject(data, 'game_indices')
    // console.log(game_indices)
    // const version = getValueFromNestedObject(game_indices, 'version')
    // console.log(version)
    // const url = getValueFromNestedObject(data, 'url')
    // console.log(version['url'])
    // console.log(url)
  }, [data])

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="">
        <pre>{JSON.stringify(data, undefined, 2)}</pre>
        <hr />
        <pre>{JSON.stringify(cache, undefined, 2)}</pre>

        {/* <button onClick={async () => {
        }}>Create model</button> */}
      </main>
    </>
  );
};

export default Home;

export const getServerSideProps: GetServerSideProps<Props> = async () => {
  getFieldModel(ApproverDetail.fields, "Profile")
  // const res = await apiService.get({ url: "/user-profile/users", stringArray: { name: "userIds", values: ["dev-52", "120"] } })


  // await config.update("configuraions", "ggrxmHfqYdD8huVFB3lN", "docId", "ggrxmHfqYdD8huVFB3lN", "name", "beer")
  // await config.add({
  //   id: "",
  //   name: "connnection string 3",
  //   catagory: "sql connection",
  //   item: []
  // })

  // console.log('redis', await config.findBy({name: "azure service principal apvc"}))
  const c = await config.findBy({
    // f: (c) => c.name === "azure service principal apvc"
  })

  await config.update({
    docId: "ggrxmHfqYdD8huVFB3lN",
    name: "===== xxxx",
    catagory: "===== xxxx",
    item: []
  })
  // console.log('redis', c)

  const redisAlls = await redis.scan()

  return {
    props: {
      data: c,
      cache: redisAlls
    },
  }
}